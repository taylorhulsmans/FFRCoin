{
  "contractName": "IAdvancedWETH",
  "abi": [
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "depositAndTransferFromThenCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.7+commit.b8d736ae\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositAndTransferFromThenCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Moody Salem\",\"details\":\"The underlying assumption is that the user wants to use ETH and avoid unnecessary approvals, but ERC20 is     required to interact with many protocols. This contract enables a user to interact with protocols consuming     ERC20 without additional approvals.\",\"methods\":{\"depositAndTransferFromThenCall(uint256,address,bytes)\":{\"details\":\"Use this method to spend a combination of ETH and WETH as WETH. Refunds any unspent WETH to the caller as     ETH. Note that either `amount` or `msg.value` may be 0, but not both.\",\"params\":{\"amount\":\"The amount to transfer from the caller to this contract and approve for the `to` address, or 0.\",\"data\":\"The data to forward to the contract after minting WETH\",\"to\":\"The address to approve and call after minting WETH\"}},\"weth()\":{\"details\":\"Returns the WETH contract that this Advanced WETH contract uses.\",\"returns\":{\"_0\":\"the WETH contract used by this contract.\"}},\"withdrawTo(address)\":{\"details\":\"Use this method as a callback from other contracts to unwrap WETH before forwarding to the user.\",\"params\":{\"to\":\"The address that should receive the unwrapped ETH.\"}}},\"title\":\"Advanced WETH Interface\"},\"userdoc\":{\"methods\":{\"depositAndTransferFromThenCall(uint256,address,bytes)\":{\"notice\":\"Deposits any ETH sent to the contract, and transfers additional WETH from the caller,     and then approves and calls another contract `to` with data `data`.\"},\"weth()\":{\"notice\":\"Returns the WETH contract that this Advanced WETH contract uses.\"},\"withdrawTo(address)\":{\"notice\":\"Unwrap and forward all WETH held by the contract to the given address. This should never be called     directly, but rather as a callback from a contract call that results in sending WETH to this contract.\"}},\"notice\":\"Unlocks additional features for Wrapped Ether, or WETH, that allow you to interact with contracts that     use WETH transparently as if you were using ETH. Approve this contract to spend your WETH to use.\"}},\"settings\":{\"compilationTarget\":{\"/Users/moody/IdeaProjects/wrapped-weth/contracts/interfaces/IAdvancedWETH.sol\":\"IAdvancedWETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"/Users/moody/IdeaProjects/wrapped-weth/contracts/interfaces/IAdvancedWETH.sol\":{\"keccak256\":\"0x5a8515f952cc63c9e45d8aa06b59d5885eca0f9342adce3a8d7ef134e131f688\",\"urls\":[\"bzz-raw://389c11be82b8c06d88368fcf600b420d2519b42073884c5a43c9f4d63f73db52\",\"dweb:/ipfs/QmVyHrpKvzyUA8ePhZ7v7f3FKKX8yukJq8sCZuAc2J5TK1\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity >=0.4.0;\n\n/// @title Advanced WETH Interface\n/// @author Moody Salem\n/// @notice Unlocks additional features for Wrapped Ether, or WETH, that allow you to interact with contracts that\n///     use WETH transparently as if you were using ETH. Approve this contract to spend your WETH to use.\n/// @dev The underlying assumption is that the user wants to use ETH and avoid unnecessary approvals, but ERC20 is\n///     required to interact with many protocols. This contract enables a user to interact with protocols consuming\n///     ERC20 without additional approvals.\ninterface IAdvancedWETH {\n    /// @notice Returns the WETH contract that this Advanced WETH contract uses.\n    /// @dev Returns the WETH contract that this Advanced WETH contract uses.\n    /// @return the WETH contract used by this contract.\n    function weth() external view returns (address payable);\n\n    /// @notice Deposits any ETH sent to the contract, and transfers additional WETH from the caller,\n    ///     and then approves and calls another contract `to` with data `data`.\n    /// @dev Use this method to spend a combination of ETH and WETH as WETH. Refunds any unspent WETH to the caller as\n    ///     ETH. Note that either `amount` or `msg.value` may be 0, but not both.\n    /// @param amount The amount to transfer from the caller to this contract and approve for the `to` address, or 0.\n    /// @param to The address to approve and call after minting WETH\n    /// @param data The data to forward to the contract after minting WETH\n    function depositAndTransferFromThenCall(uint amount, address to, bytes calldata data) external payable;\n\n    /// @notice Unwrap and forward all WETH held by the contract to the given address. This should never be called\n    ///     directly, but rather as a callback from a contract call that results in sending WETH to this contract.\n    /// @dev Use this method as a callback from other contracts to unwrap WETH before forwarding to the user.\n    /// @param to The address that should receive the unwrapped ETH.\n    function withdrawTo(address payable to) external;\n}\n",
  "sourcePath": "/Users/moody/IdeaProjects/wrapped-weth/contracts/interfaces/IAdvancedWETH.sol",
  "ast": {
    "absolutePath": "/Users/moody/IdeaProjects/wrapped-weth/contracts/interfaces/IAdvancedWETH.sol",
    "exportedSymbols": {
      "IAdvancedWETH": [
        230
      ]
    },
    "id": 231,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 206,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:2"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 207,
          "nodeType": "StructuredDocumentation",
          "src": "26:555:2",
          "text": "@title Advanced WETH Interface\n @author Moody Salem\n @notice Unlocks additional features for Wrapped Ether, or WETH, that allow you to interact with contracts that\n     use WETH transparently as if you were using ETH. Approve this contract to spend your WETH to use.\n @dev The underlying assumption is that the user wants to use ETH and avoid unnecessary approvals, but ERC20 is\n     required to interact with many protocols. This contract enables a user to interact with protocols consuming\n     ERC20 without additional approvals."
        },
        "fullyImplemented": false,
        "id": 230,
        "linearizedBaseContracts": [
          230
        ],
        "name": "IAdvancedWETH",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 208,
              "nodeType": "StructuredDocumentation",
              "src": "611:211:2",
              "text": "@notice Returns the WETH contract that this Advanced WETH contract uses.\n @dev Returns the WETH contract that this Advanced WETH contract uses.\n @return the WETH contract used by this contract."
            },
            "functionSelector": "3fc8cef3",
            "id": 213,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "weth",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 209,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "840:2:2"
            },
            "returnParameters": {
              "id": 212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 211,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 213,
                  "src": "866:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 210,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "866:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "865:17:2"
            },
            "scope": 230,
            "src": "827:56:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 214,
              "nodeType": "StructuredDocumentation",
              "src": "889:640:2",
              "text": "@notice Deposits any ETH sent to the contract, and transfers additional WETH from the caller,\n     and then approves and calls another contract `to` with data `data`.\n @dev Use this method to spend a combination of ETH and WETH as WETH. Refunds any unspent WETH to the caller as\n     ETH. Note that either `amount` or `msg.value` may be 0, but not both.\n @param amount The amount to transfer from the caller to this contract and approve for the `to` address, or 0.\n @param to The address to approve and call after minting WETH\n @param data The data to forward to the contract after minting WETH"
            },
            "functionSelector": "58994345",
            "id": 223,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "depositAndTransferFromThenCall",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 221,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 216,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 223,
                  "src": "1574:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 215,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1574:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 218,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 223,
                  "src": "1587:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 217,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1587:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 220,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 223,
                  "src": "1599:19:2",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 219,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1599:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1573:46:2"
            },
            "returnParameters": {
              "id": 222,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1636:0:2"
            },
            "scope": 230,
            "src": "1534:103:2",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 224,
              "nodeType": "StructuredDocumentation",
              "src": "1643:404:2",
              "text": "@notice Unwrap and forward all WETH held by the contract to the given address. This should never be called\n     directly, but rather as a callback from a contract call that results in sending WETH to this contract.\n @dev Use this method as a callback from other contracts to unwrap WETH before forwarding to the user.\n @param to The address that should receive the unwrapped ETH."
            },
            "functionSelector": "72b0d90c",
            "id": 229,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawTo",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 227,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 226,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 229,
                  "src": "2072:18:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 225,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2072:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2071:20:2"
            },
            "returnParameters": {
              "id": 228,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2100:0:2"
            },
            "scope": 230,
            "src": "2052:49:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 231,
        "src": "581:1522:2"
      }
    ],
    "src": "0:2104:2"
  },
  "legacyAST": {
    "absolutePath": "/Users/moody/IdeaProjects/wrapped-weth/contracts/interfaces/IAdvancedWETH.sol",
    "exportedSymbols": {
      "IAdvancedWETH": [
        230
      ]
    },
    "id": 231,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 206,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:2"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 207,
          "nodeType": "StructuredDocumentation",
          "src": "26:555:2",
          "text": "@title Advanced WETH Interface\n @author Moody Salem\n @notice Unlocks additional features for Wrapped Ether, or WETH, that allow you to interact with contracts that\n     use WETH transparently as if you were using ETH. Approve this contract to spend your WETH to use.\n @dev The underlying assumption is that the user wants to use ETH and avoid unnecessary approvals, but ERC20 is\n     required to interact with many protocols. This contract enables a user to interact with protocols consuming\n     ERC20 without additional approvals."
        },
        "fullyImplemented": false,
        "id": 230,
        "linearizedBaseContracts": [
          230
        ],
        "name": "IAdvancedWETH",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 208,
              "nodeType": "StructuredDocumentation",
              "src": "611:211:2",
              "text": "@notice Returns the WETH contract that this Advanced WETH contract uses.\n @dev Returns the WETH contract that this Advanced WETH contract uses.\n @return the WETH contract used by this contract."
            },
            "functionSelector": "3fc8cef3",
            "id": 213,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "weth",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 209,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "840:2:2"
            },
            "returnParameters": {
              "id": 212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 211,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 213,
                  "src": "866:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 210,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "866:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "865:17:2"
            },
            "scope": 230,
            "src": "827:56:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 214,
              "nodeType": "StructuredDocumentation",
              "src": "889:640:2",
              "text": "@notice Deposits any ETH sent to the contract, and transfers additional WETH from the caller,\n     and then approves and calls another contract `to` with data `data`.\n @dev Use this method to spend a combination of ETH and WETH as WETH. Refunds any unspent WETH to the caller as\n     ETH. Note that either `amount` or `msg.value` may be 0, but not both.\n @param amount The amount to transfer from the caller to this contract and approve for the `to` address, or 0.\n @param to The address to approve and call after minting WETH\n @param data The data to forward to the contract after minting WETH"
            },
            "functionSelector": "58994345",
            "id": 223,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "depositAndTransferFromThenCall",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 221,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 216,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 223,
                  "src": "1574:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 215,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1574:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 218,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 223,
                  "src": "1587:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 217,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1587:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 220,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 223,
                  "src": "1599:19:2",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 219,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1599:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1573:46:2"
            },
            "returnParameters": {
              "id": 222,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1636:0:2"
            },
            "scope": 230,
            "src": "1534:103:2",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 224,
              "nodeType": "StructuredDocumentation",
              "src": "1643:404:2",
              "text": "@notice Unwrap and forward all WETH held by the contract to the given address. This should never be called\n     directly, but rather as a callback from a contract call that results in sending WETH to this contract.\n @dev Use this method as a callback from other contracts to unwrap WETH before forwarding to the user.\n @param to The address that should receive the unwrapped ETH."
            },
            "functionSelector": "72b0d90c",
            "id": 229,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawTo",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 227,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 226,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 229,
                  "src": "2072:18:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 225,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2072:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2071:20:2"
            },
            "returnParameters": {
              "id": 228,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2100:0:2"
            },
            "scope": 230,
            "src": "2052:49:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 231,
        "src": "581:1522:2"
      }
    ],
    "src": "0:2104:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.7+commit.b8d736ae.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.1.0",
  "updatedAt": "2020-05-17T17:24:23.334Z",
  "devdoc": {
    "author": "Moody Salem",
    "details": "The underlying assumption is that the user wants to use ETH and avoid unnecessary approvals, but ERC20 is     required to interact with many protocols. This contract enables a user to interact with protocols consuming     ERC20 without additional approvals.",
    "methods": {
      "depositAndTransferFromThenCall(uint256,address,bytes)": {
        "details": "Use this method to spend a combination of ETH and WETH as WETH. Refunds any unspent WETH to the caller as     ETH. Note that either `amount` or `msg.value` may be 0, but not both.",
        "params": {
          "amount": "The amount to transfer from the caller to this contract and approve for the `to` address, or 0.",
          "data": "The data to forward to the contract after minting WETH",
          "to": "The address to approve and call after minting WETH"
        }
      },
      "weth()": {
        "details": "Returns the WETH contract that this Advanced WETH contract uses.",
        "returns": {
          "_0": "the WETH contract used by this contract."
        }
      },
      "withdrawTo(address)": {
        "details": "Use this method as a callback from other contracts to unwrap WETH before forwarding to the user.",
        "params": {
          "to": "The address that should receive the unwrapped ETH."
        }
      }
    },
    "title": "Advanced WETH Interface"
  },
  "userdoc": {
    "methods": {
      "depositAndTransferFromThenCall(uint256,address,bytes)": {
        "notice": "Deposits any ETH sent to the contract, and transfers additional WETH from the caller,     and then approves and calls another contract `to` with data `data`."
      },
      "weth()": {
        "notice": "Returns the WETH contract that this Advanced WETH contract uses."
      },
      "withdrawTo(address)": {
        "notice": "Unwrap and forward all WETH held by the contract to the given address. This should never be called     directly, but rather as a callback from a contract call that results in sending WETH to this contract."
      }
    },
    "notice": "Unlocks additional features for Wrapped Ether, or WETH, that allow you to interact with contracts that     use WETH transparently as if you were using ETH. Approve this contract to spend your WETH to use."
  }
}